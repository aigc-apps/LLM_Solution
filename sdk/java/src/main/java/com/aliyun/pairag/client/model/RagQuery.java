/*
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aliyun.pairag.client.model;

import java.util.Objects;
import com.aliyun.pairag.client.model.VectorDbConfig;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import com.google.gson.TypeAdapter;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import java.io.IOException;

import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import com.aliyun.pairag.client.JSON;

/**
 * RagQuery
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2024-09-19T15:32:54.309932+08:00[Asia/Shanghai]", comments = "Generator version: 7.8.0")
public class RagQuery {
  public static final String SERIALIZED_NAME_QUESTION = "question";
  @SerializedName(SERIALIZED_NAME_QUESTION)
  private String question;

  public static final String SERIALIZED_NAME_TEMPERATURE = "temperature";
  @SerializedName(SERIALIZED_NAME_TEMPERATURE)
  private BigDecimal temperature;

  public static final String SERIALIZED_NAME_CHAT_HISTORY = "chat_history";
  @SerializedName(SERIALIZED_NAME_CHAT_HISTORY)
  private List<Map<String, String>> chatHistory;

  public static final String SERIALIZED_NAME_SESSION_ID = "session_id";
  @SerializedName(SERIALIZED_NAME_SESSION_ID)
  private String sessionId;

  public static final String SERIALIZED_NAME_VECTOR_DB = "vector_db";
  @SerializedName(SERIALIZED_NAME_VECTOR_DB)
  private VectorDbConfig vectorDb;

  public static final String SERIALIZED_NAME_STREAM = "stream";
  @SerializedName(SERIALIZED_NAME_STREAM)
  private Boolean stream;

  public static final String SERIALIZED_NAME_WITH_INTENT = "with_intent";
  @SerializedName(SERIALIZED_NAME_WITH_INTENT)
  private Boolean withIntent;

  public RagQuery() {
  }

  public RagQuery question(String question) {
    this.question = question;
    return this;
  }

  /**
   * Get question
   * @return question
   */
  @javax.annotation.Nonnull
  public String getQuestion() {
    return question;
  }

  public void setQuestion(String question) {
    this.question = question;
  }


  public RagQuery temperature(BigDecimal temperature) {
    this.temperature = temperature;
    return this;
  }

  /**
   * Get temperature
   * @return temperature
   */
  @javax.annotation.Nullable
  public BigDecimal getTemperature() {
    return temperature;
  }

  public void setTemperature(BigDecimal temperature) {
    this.temperature = temperature;
  }


  public RagQuery chatHistory(List<Map<String, String>> chatHistory) {
    this.chatHistory = chatHistory;
    return this;
  }

  public RagQuery addChatHistoryItem(Map<String, String> chatHistoryItem) {
    if (this.chatHistory == null) {
      this.chatHistory = new ArrayList<>();
    }
    this.chatHistory.add(chatHistoryItem);
    return this;
  }

  /**
   * Get chatHistory
   * @return chatHistory
   */
  @javax.annotation.Nullable
  public List<Map<String, String>> getChatHistory() {
    return chatHistory;
  }

  public void setChatHistory(List<Map<String, String>> chatHistory) {
    this.chatHistory = chatHistory;
  }


  public RagQuery sessionId(String sessionId) {
    this.sessionId = sessionId;
    return this;
  }

  /**
   * Get sessionId
   * @return sessionId
   */
  @javax.annotation.Nullable
  public String getSessionId() {
    return sessionId;
  }

  public void setSessionId(String sessionId) {
    this.sessionId = sessionId;
  }


  public RagQuery vectorDb(VectorDbConfig vectorDb) {
    this.vectorDb = vectorDb;
    return this;
  }

  /**
   * Get vectorDb
   * @return vectorDb
   */
  @javax.annotation.Nullable
  public VectorDbConfig getVectorDb() {
    return vectorDb;
  }

  public void setVectorDb(VectorDbConfig vectorDb) {
    this.vectorDb = vectorDb;
  }


  public RagQuery stream(Boolean stream) {
    this.stream = stream;
    return this;
  }

  /**
   * Get stream
   * @return stream
   */
  @javax.annotation.Nullable
  public Boolean getStream() {
    return stream;
  }

  public void setStream(Boolean stream) {
    this.stream = stream;
  }


  public RagQuery withIntent(Boolean withIntent) {
    this.withIntent = withIntent;
    return this;
  }

  /**
   * Get withIntent
   * @return withIntent
   */
  @javax.annotation.Nullable
  public Boolean getWithIntent() {
    return withIntent;
  }

  public void setWithIntent(Boolean withIntent) {
    this.withIntent = withIntent;
  }



  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RagQuery ragQuery = (RagQuery) o;
    return Objects.equals(this.question, ragQuery.question) &&
        Objects.equals(this.temperature, ragQuery.temperature) &&
        Objects.equals(this.chatHistory, ragQuery.chatHistory) &&
        Objects.equals(this.sessionId, ragQuery.sessionId) &&
        Objects.equals(this.vectorDb, ragQuery.vectorDb) &&
        Objects.equals(this.stream, ragQuery.stream) &&
        Objects.equals(this.withIntent, ragQuery.withIntent);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(question, temperature, chatHistory, sessionId, vectorDb, stream, withIntent);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RagQuery {\n");
    sb.append("    question: ").append(toIndentedString(question)).append("\n");
    sb.append("    temperature: ").append(toIndentedString(temperature)).append("\n");
    sb.append("    chatHistory: ").append(toIndentedString(chatHistory)).append("\n");
    sb.append("    sessionId: ").append(toIndentedString(sessionId)).append("\n");
    sb.append("    vectorDb: ").append(toIndentedString(vectorDb)).append("\n");
    sb.append("    stream: ").append(toIndentedString(stream)).append("\n");
    sb.append("    withIntent: ").append(toIndentedString(withIntent)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("question");
    openapiFields.add("temperature");
    openapiFields.add("chat_history");
    openapiFields.add("session_id");
    openapiFields.add("vector_db");
    openapiFields.add("stream");
    openapiFields.add("with_intent");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("question");
  }

  /**
   * Validates the JSON Element and throws an exception if issues found
   *
   * @param jsonElement JSON Element
   * @throws IOException if the JSON Element is invalid with respect to RagQuery
   */
  public static void validateJsonElement(JsonElement jsonElement) throws IOException {
      if (jsonElement == null) {
        if (!RagQuery.openapiRequiredFields.isEmpty()) { // has required fields but JSON element is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in RagQuery is not found in the empty JSON string", RagQuery.openapiRequiredFields.toString()));
        }
      }

      Set<Map.Entry<String, JsonElement>> entries = jsonElement.getAsJsonObject().entrySet();
      // check to see if the JSON string contains additional fields
      for (Map.Entry<String, JsonElement> entry : entries) {
        if (!RagQuery.openapiFields.contains(entry.getKey())) {
          throw new IllegalArgumentException(String.format("The field `%s` in the JSON string is not defined in the `RagQuery` properties. JSON: %s", entry.getKey(), jsonElement.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : RagQuery.openapiRequiredFields) {
        if (jsonElement.getAsJsonObject().get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonElement.toString()));
        }
      }
        JsonObject jsonObj = jsonElement.getAsJsonObject();
      if (!jsonObj.get("question").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `question` to be a primitive type in the JSON string but got `%s`", jsonObj.get("question").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("chat_history") != null && !jsonObj.get("chat_history").isJsonNull() && !jsonObj.get("chat_history").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `chat_history` to be an array in the JSON string but got `%s`", jsonObj.get("chat_history").toString()));
      }
      if ((jsonObj.get("session_id") != null && !jsonObj.get("session_id").isJsonNull()) && !jsonObj.get("session_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `session_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("session_id").toString()));
      }
      // validate the optional field `vector_db`
      if (jsonObj.get("vector_db") != null && !jsonObj.get("vector_db").isJsonNull()) {
        VectorDbConfig.validateJsonElement(jsonObj.get("vector_db"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!RagQuery.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'RagQuery' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<RagQuery> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(RagQuery.class));

       return (TypeAdapter<T>) new TypeAdapter<RagQuery>() {
           @Override
           public void write(JsonWriter out, RagQuery value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             elementAdapter.write(out, obj);
           }

           @Override
           public RagQuery read(JsonReader in) throws IOException {
             JsonElement jsonElement = elementAdapter.read(in);
             validateJsonElement(jsonElement);
             return thisAdapter.fromJsonTree(jsonElement);
           }

       }.nullSafe();
    }
  }

  /**
   * Create an instance of RagQuery given an JSON string
   *
   * @param jsonString JSON string
   * @return An instance of RagQuery
   * @throws IOException if the JSON string is invalid with respect to RagQuery
   */
  public static RagQuery fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, RagQuery.class);
  }

  /**
   * Convert an instance of RagQuery to an JSON string
   *
   * @return JSON string
   */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

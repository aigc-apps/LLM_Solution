/*
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.aliyun.pairag.client.api;

import com.aliyun.pairag.client.ApiException;
import java.io.File;
import com.aliyun.pairag.client.model.HTTPValidationError;
import com.aliyun.pairag.client.model.LlmResponse;
import com.aliyun.pairag.client.model.RagQuery;
import com.aliyun.pairag.client.model.RetrievalQuery;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RagQueryApi
 */
@Disabled
public class RagQueryApiTest {

    private final RagQueryApi api = new RagQueryApi();

    /**
     * Aconfig
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aconfigServiceConfigGetTest() throws ApiException {
        Object response = api.aconfigServiceConfigGet();
        // TODO: test validations
    }

    /**
     * Aload Agent Config
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aloadAgentConfigServiceConfigAgentPostTest() throws ApiException {
        File _file = null;
        Object response = api.aloadAgentConfigServiceConfigAgentPost(_file);
        // TODO: test validations
    }

    /**
     * Aquery Agent
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aqueryAgentServiceQueryAgentPostTest() throws ApiException {
        RagQuery ragQuery = null;
        LlmResponse response = api.aqueryAgentServiceQueryAgentPost(ragQuery);
        // TODO: test validations
    }

    /**
     * Aquery Analysis
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aqueryAnalysisServiceQueryDataAnalysisPostTest() throws ApiException {
        RagQuery ragQuery = null;
        Object response = api.aqueryAnalysisServiceQueryDataAnalysisPost(ragQuery);
        // TODO: test validations
    }

    /**
     * Aquery Llm
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aqueryLlmServiceQueryLlmPostTest() throws ApiException {
        RagQuery ragQuery = null;
        Object response = api.aqueryLlmServiceQueryLlmPost(ragQuery);
        // TODO: test validations
    }

    /**
     * Aquery Retrieval
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aqueryRetrievalServiceQueryRetrievalPostTest() throws ApiException {
        RetrievalQuery retrievalQuery = null;
        Object response = api.aqueryRetrievalServiceQueryRetrievalPost(retrievalQuery);
        // TODO: test validations
    }

    /**
     * Aquery Search
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aquerySearchServiceQuerySearchPostTest() throws ApiException {
        RagQuery ragQuery = null;
        Object response = api.aquerySearchServiceQuerySearchPost(ragQuery);
        // TODO: test validations
    }

    /**
     * Aquery
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aqueryServiceQueryPostTest() throws ApiException {
        RagQuery ragQuery = null;
        Object response = api.aqueryServiceQueryPost(ragQuery);
        // TODO: test validations
    }

    /**
     * Aupdate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void aupdateServiceConfigPatchTest() throws ApiException {
        Object body = null;
        Object response = api.aupdateServiceConfigPatch(body);
        // TODO: test validations
    }

    /**
     * Batch Evaluate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchEvaluateServiceEvaluatePostTest() throws ApiException {
        Boolean overwrite = null;
        Object response = api.batchEvaluateServiceEvaluatePost(overwrite);
        // TODO: test validations
    }

    /**
     * Batch Response Evaluate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchResponseEvaluateServiceEvaluateResponsePostTest() throws ApiException {
        Boolean overwrite = null;
        Object response = api.batchResponseEvaluateServiceEvaluateResponsePost(overwrite);
        // TODO: test validations
    }

    /**
     * Batch Retrieval Evaluate
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void batchRetrievalEvaluateServiceEvaluateRetrievalPostTest() throws ApiException {
        Boolean overwrite = null;
        Object response = api.batchRetrievalEvaluateServiceEvaluateRetrievalPost(overwrite);
        // TODO: test validations
    }

    /**
     * Generate Qa Dataset
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void generateQaDatasetServiceEvaluateGeneratePostTest() throws ApiException {
        Boolean overwrite = null;
        Object response = api.generateQaDatasetServiceEvaluateGeneratePost(overwrite);
        // TODO: test validations
    }

    /**
     * Task Status
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void taskStatusServiceGetUploadStateGetTest() throws ApiException {
        String taskId = null;
        Object response = api.taskStatusServiceGetUploadStateGet(taskId);
        // TODO: test validations
    }

    /**
     * Upload Data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadDataServiceUploadDataPostTest() throws ApiException {
        List<File> files = null;
        String faissPath = null;
        Boolean enableRaptor = null;
        Object response = api.uploadDataServiceUploadDataPost(files, faissPath, enableRaptor);
        // TODO: test validations
    }

    /**
     * Upload Datasheet
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadDatasheetServiceUploadDatasheetPostTest() throws ApiException {
        File _file = null;
        Object response = api.uploadDatasheetServiceUploadDatasheetPost(_file);
        // TODO: test validations
    }

    /**
     * Upload Oss Data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void uploadOssDataServiceUploadDataFromOssPostTest() throws ApiException {
        String ossPrefix = null;
        String faissPath = null;
        Boolean enableRaptor = null;
        Object response = api.uploadOssDataServiceUploadDataFromOssPost(ossPrefix, faissPath, enableRaptor);
        // TODO: test validations
    }

}

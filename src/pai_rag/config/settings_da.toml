dynaconf_merge = true

[rag]
name = "pai_rag"
version = "0.1.1"

[rag.agent]
custom_agent_config_file = ""
agent_tool_type = ""

[rag.chat_store]
type = "Local" # [Local, Aliyun-Redis]
host = "Aliyun-Redis host"
password = "Aliyun-Redis user:pwd"
persist_path = "localdata/storage"

[rag.data_analysis]
type = "mysql"
user = "root"
password = "mysql123456"
host = "127.0.0.1"
port = "3306"
database = "my_pets"
enable_enhanced_description = false
enable_db_embedding = true
max_col_num = 100
max_val_num = 10000
enable_db_history = false
enable_query_preprocessor = true
enable_db_preretriever = true
enable_db_selector = false
nl2sql_prompt = "给定一个输入问题，创建一个语法正确的{dialect}查询语句来执行。要求：\n----------\n1.只根据问题查询几个相关的列。\n2.请注意只使用提供的数据库结构信息db_schema以及可能历史查询db_history中看到的列名，不要查询不存在的列。\n3.请注意哪个列位于哪个表中，必要时请使用表名限定列名。\n4.如果问题中包含了SQL语句，请提取并基于提供的db_schema和db_history校验优化。\n----------\n用户问题: {query_str} \n数据表结构信息和数据样例: {db_schema} \n历史查询: {db_history} \n\n你必须使用以下格式，每项占一行：\nQuestion: Question here \nSQLQuery: SQL Query (end with ;) to run"
synthesizer_prompt = "给定一个输入问题，根据查询代码指令以及查询结果生成最终回复。要求：\n----------\n1.生成的回复语言需要与输入问题的语言保持一致。\n2.生成的回复需要关注数据表信息描述中可能存在的字段单位或其他补充信息。\n----------\n输入问题: {query_str} \n数据表信息描述: {db_schema} \nSQL 或 Python 查询代码指令（可选）: {query_code_instruction}\n查询结果: {query_output}\n\n最终回复: "

[rag.data_reader]
type = "SimpleDirectoryReader"

# embedding configurations, source support API: OpenAI,DashScope; and local model:HuggingFace
# if use API, need set OPENAI_API_KEY or DASHSCOPE_API_KEY in ENV, If HuggingFace, need set model
# eg.
# source = "HuggingFace"
# model = "bge-m3"
# embed_batch_size = 10
[rag.embedding]
source = "DashScope"
embed_batch_size = 10
enable_sparse = false

[rag.index]
persist_path = "localdata/storage"
enable_multimodal = true
vector_store.type = "FAISS"

# llm configurations, source support API: OpenAI,DashScope or PAI-EAS's deployment
# eg.
# source = "PaiEas"
# model = ""
# endpoint = ""
# token = ""
[rag.llm]
source = "DashScope"

[rag.multimodal_embedding]
source = "cnclip"

[rag.multimodal_llm]
source = "dashscope"

[rag.node_enhancement]
tree_depth = 3
max_clusters = 52
proba_threshold = 0.10

[rag.node_parser]
type = "Sentence"
chunk_size = 500
chunk_overlap = 10
enable_multimodal = true

[rag.oss_store]
bucket = ""
endpoint = "oss-cn-hangzhou.aliyuncs.com"

[rag.postprocessor]
reranker_type = "no-reranker" # [simple-weighted-reranker, model-based-reranker]
reranker_model = "bge-reranker-base" # [bge-reranker-base, bge-reranker-large]
similarity_threshold = 0.5
top_n = 2

[rag.query_transform]
type = ""

[rag.retriever]
similarity_top_k = 3
retrieval_mode = "hybrid" # [hybrid, embedding, keyword, router]
query_rewrite_n = 1 # set to 1 to disable query generation

[rag.search]
search_api_key = ""

[rag.synthesizer]
type = "SimpleSummarize"

dynaconf_merge = true

[rag]
name = "pai_rag"
version = "0.1.1"

[rag.agent]
type = "react"

[rag.chat_engine]
type = "CondenseQuestionChatEngine"

[rag.chat_store]
type = "Local" # [Local, Aliyun-Redis]
host = "Aliyun-Redis host"
password = "Aliyun-Redis user:pwd"
persist_path = "localdata/storage"

[rag.data_reader]
type = "SimpleDirectoryReader"

# embedding configurations, source support API: OpenAI,DashScope; and local model:HuggingFace
# if use API, need set OPENAI_API_KEY or DASHSCOPE_API_KEY in ENV, If HuggingFace, need set model_name
# eg.
# source = "HuggingFace"
# model_name = "bge-small-zh-v1.5"
# embed_batch_size = 10
[rag.embedding]
source = "DashScope"
embed_batch_size = 10

[rag.embedding.multi_modal]
source = "cnclip"

[rag.evaluation]
retrieval = ["mrr", "hit_rate"]
response_label = true
response = ["Faithfulness", "Answer Relevancy", "Correctness", "Semantic Similarity"]

[rag.function_calling_llm]
source = ""

[rag.index]
persist_path = "localdata/storage"
vector_store.type = "FAISS"

# llm configurations, source support API: OpenAI,DashScope or PAI-EAS's deployment
# eg.
# source = "PaiEas"
# endpoint = ""
# token = ""
[rag.llm]
source = "DashScope"
name = "qwen-turbo"

[rag.llm.multi_modal]
source = "DashScope"

[rag.llm_chat_engine]
type = "SimpleChatEngine"

[rag.node_enhancement]
tree_depth = 3
max_clusters = 52
proba_threshold = 0.10

[rag.node_parser]
type = "Sentence"
chunk_size = 500
chunk_overlap = 10

[rag.oss_store]
bucket = ""
endpoint = ""

[rag.postprocessor]
reranker_type = "simple-weighted-reranker" # [simple-weighted-reranker, model-based-reranker]
reranker_model = "bge-reranker-base" # [bge-reranker-base, bge-reranker-large]
keyword_weight = 0.3
vector_weight = 0.7
similarity_threshold = 0.5
top_n = 2

[rag.query_engine]
type = "RetrieverQueryEngine"

[rag.retriever]
retrieval_mode = "nl2sql"
dialect = "sqlite"
user = ""
password = ""
host = ""
port = ""
path = "./tests/testdata/data/db_data"
dbname = "pets.db"
tables = []
descriptions = {}

[rag.synthesizer]
type = "SimpleSummarize"
text_qa_template = "参考内容信息如下\n---------------------\n{context_str}\n---------------------根据提供内容而非其他知识回答问题.如果提供的内容是一个元组列表，请直接提取元组列表中的数字或文本信息回答问题.\n\n以下是示例：\n示例1:\n问题：年龄小于20岁的学生有哪些\n参考文本：[('Linda', 'Smith'), ('Tracy', 'Kim')]\n答案：年龄小于20岁的学生有：Linda Smith 和 Tracy Kim\n\n示例2:\n问题：年龄小于20的学生有多少个\n参考文本：[(19,)]\n答案：有19个学生\n\n示例3:\n问题：有多少只狗\n参考文本：[(2,)]\n答案：有2只狗 \n问题: {query_str}\n答案: \n"

[rag.tool]
type = ["calculator", "weather"]
weather_api_key = ""
